services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: backend
    working_dir: /backend
    volumes:
      - ./app:/backend/app
      - ./files:/usr/share/nginx/html/files
      - ./alembic:/backend/alembic
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/db
    # uvicornは開発時、deploy時はgunicornを使用
    command: /bin/sh -c "uv run alembic upgrade head && uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"
    depends_on:
      postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_started
    networks:
      - cloudflared_network

  postgres:
    image: ankane/pgvector
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=db
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d db"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - cloudflared_network
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: es
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    volumes:
      - ./esdata:/usr/share/elasticsearch/data
    depends_on:
      - postgres
    networks:
      - cloudflared_network
    
  
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./files:/usr/share/nginx/html/files
    ports:
      - "80:8000"
    depends_on:
      - backend
    networks:
      - cloudflared_network

  cloudflared:
    build:
      context: .
      dockerfile: Dockerfile.cloudflared
    container_name: cloudflared
    depends_on:
      - backend
    networks:
      - cloudflared_network


volumes:
  postgres_data:
  files:

networks:
  cloudflared_network:
    driver: bridge

